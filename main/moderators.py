from random import randrange

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import *
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import json
from glQiwiApi.types import Bill
from yoomoney import Quickpay

import nav
from filters import *
from loader import dp, bot
from main import finish_poll
from main.poll_controller import *
from src import PollDB, CheckDB
from src.data.config import BUTTONS, YOOMONEY, QIWI_WALLET
from states.states import *


# ======================= CALLBACKS ======================= #
@dp.callback_query_handler(state=EmployeesPoll.Payment)
async def callback_answer_poll(callback: CallbackQuery, state: FSMContext):
    # ============= POLL PAYMENT ============= #
    if 'poll:payment' in callback.data:
        if 'poll:payment:qiwi' == callback.data:
            price = (await state.get_data())["price"]
            num = hash(randrange(1, 100000))
            async with QIWI_WALLET as w:
                # –î–µ–ª–∞–µ–º p2p –∑–∞–ø—Ä–æ—Å(—Å—á—ë—Ç)
                w._p2p_router.config.P2P_QIWI_HEADERS["Referrer-Policy"] = "no-referrer"
                bill = await w.create_p2p_bill(
                    amount=price,
                    comment=f'–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–æ—Ç–µ –°–∫—Ä—É–∂–¥–∞ –¥–ª—è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –Ω–æ–º–µ—Ä: {num}'
                )
                await state.update_data(bill_id=bill.bill_id)
                await state.update_data(bill_num=num)
            # –†–µ–¥–∞—á–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
            await callback.message.edit_reply_markup(nav.qiwi_payment_panel(bill.pay_url))
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–µ–π—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –æ–ø–ª–∞—Ç—É
            await state.set_state('qiwi_payment')
        if 'poll:payment:yoomoney' == callback.data:
            price = (await state.get_data())["price"]
            quickpay = Quickpay(
                receiver=YOOMONEY,
                quickpay_form="shop",
                targets="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞",
                paymentType="SB",
                sum=price,
            )
            # –†–µ–¥–∞—á–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
            await callback.message.edit_reply_markup(nav.yoomoney_payment_panel(quickpay.redirected_url))
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–µ–π—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –æ–ø–ª–∞—Ç—É
            await state.set_state('yoomoney_payment')
        if 'poll:payment:back' == callback.data:
            await callback.message.edit_reply_markup(nav.poll_payment_menu)

        if 'poll:payment:btc' == callback.data:
            price = (await state.get_data())["price"]
            await callback.message.answer(text=
f'''
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —á–µ–∫ –Ω–∞ {price} RUB
–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
''')
            await state.set_state('btc_payment')

@dp.callback_query_handler()
async def callback_answer(callback: CallbackQuery, state: FSMContext):
    sdata = callback.data.split(':')
    if 'admin:banker' in callback.data:
        action = sdata[2]
        check = sdata[3]
        poll_id = sdata[4]
        user_id = sdata[5]
        deposit = sdata[6]
        print(action, callback.data, check, poll_id)
        if 'approve' == action:
            # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã
            try:
                await finish_poll(owner_id=user_id, deposit=deposit, state=None)
                await bot.send_message(chat_id=user_id, text=f'–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —á–µ–∫–∞ {check} –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n'
                                                             '–°–µ–π—á–∞—Å –∞–Ω–∫–µ—Ç–∞ —É–π–¥—ë—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, \n'
                                                             '–≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –ü—Ä–æ—Ñ–∏–ª–µ /profile')
            except:
                await callback.message.answer(f'–£ —é–∑–µ—Ä–∞ {user_id} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚Äº')
        if 'cancel' == action:
            try:
                PollDB.polls_filter_remove('poll_id', poll_id)
                await bot.send_message(chat_id=user_id, text=f'–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —á–µ–∫–∞ {check} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n'
                                                             '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ, —Ç.–∫. –æ–Ω–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞!\n'
                                                             '/find_employs')
            except:
                pass
        await callback.message.delete()
        CheckDB.remove_check(check)
    # ============= MODERATOR POLL APPROVAL ============= #
    if 'poll:approval' in callback.data:
        poll_id = sdata[3]
        action = sdata[2]
        # Process Accept Button
        if action == 'accept':
            await publish_poll(poll_id)
            await callback.message.delete()

        # Process Reject Button
        if action == 'reject':
            await RejectState.Reason.set()
            await dp.get_current().current_state().update_data(poll_id=poll_id)
            await dp.get_current().current_state().update_data(mod_username='@' + callback.from_user.username)
            await bot.send_message(callback.from_user.id,
                                   text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∞–Ω–∫–µ—Ç—ã {poll_id}')
            await callback.message.delete()


# ======================= MESSAGE HANDLERS ======================= #
@dp.message_handler(IsModerator(), state=RejectState.Reason)
async def state_poll_reject(message: Message, state: FSMContext):
    poll_id = (await state.get_data())["poll_id"]
    mod_username = (await state.get_data())["mod_username"]
    await reject_poll(poll_id, mod_username, message.text)
    await state.finish()


@dp.message_handler(Text(BUTTONS["see_polls"]), IsModerator())
@dp.message_handler(Command('polls'), IsModerator())
async def cmd_see_polls(message: Message):
    polls = PollDB.polls_filter('status', str(PollStatus.ON_MODERATION))
    # –ï—Å–ª–∏ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç
    if polls == []:
        await message.answer('üÉè –ó–∞—è–≤–æ–∫ –Ω–µ—Ç! üÉè')
        return
    # –í—ã–≤–æ–¥–∏–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∏ –ø–æ–¥—Ü–µ–ø–ª—è–µ–º –∫ –Ω–∏–º –∏–Ω–ª–∞–π–Ω—ã
    await message.answer('–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
    for poll_ent in polls:
        moder_panel = InlineKeyboardMarkup(row_width=3, inline_keyboard=[
            [
                InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'poll:approval:reject:{poll_ent["id"]}'),
                InlineKeyboardButton(text='–û–¥–æ–±—Ä–∏—Ç—å', callback_data=f'poll:approval:accept:{poll_ent["id"]}'),
            ]
        ]
                                           )
        await message.answer(f'üé© User {poll_ent["owner_id"]}\n'
                             f'https://t.me/{UsersDB.filter("id", poll_ent["owner_id"])[0]["username"]}\n'
                             f'======================================='
                             f'{poll_ent["vacancy"]}'
                             f'=======================================', reply_markup=moder_panel)
